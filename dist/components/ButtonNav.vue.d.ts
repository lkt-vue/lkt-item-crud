import { SetupContext } from 'vue';
import { ButtonConfig, ItemCrudButtonNavVisibility, ItemCrudMode, ItemCrudView, LktObject } from 'lkt-vue-kernel';
import { HTTPResponse } from 'lkt-http-client';
type __VLS_Props = {
    item: LktObject;
    editing?: boolean;
    loading?: boolean;
    view: ItemCrudView;
    mode: ItemCrudMode;
    createButton?: ButtonConfig | false;
    updateButton?: ButtonConfig | false;
    dropButton?: ButtonConfig | false;
    editModeButton?: ButtonConfig | false;
    dataChanged: boolean;
    canUpdate?: boolean;
    canDrop?: boolean;
    canSwitchEditMode?: boolean;
    perms?: Array<string>;
    httpSuccessRead?: boolean;
    buttonNavVisibility: ItemCrudButtonNavVisibility;
};
declare const safeCreateButton: import("vue").Ref<{
    type?: import("lkt-vue-kernel").ButtonType | undefined;
    name?: string | undefined;
    value?: string | undefined;
    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
    openTooltip?: boolean | undefined;
    loading?: boolean | undefined;
    class?: string | undefined;
    containerClass?: string | undefined;
    wrapContent?: boolean | undefined;
    text?: import("lkt-vue-kernel").ValidTextValue;
    icon?: string | undefined;
    iconEnd?: string | undefined;
    img?: string | undefined;
    checked?: boolean | undefined;
    textOn?: import("lkt-vue-kernel").ValidTextValue;
    textOff?: import("lkt-vue-kernel").ValidTextValue;
    iconOn?: import("lkt-vue-kernel").ValidTextValue;
    iconOff?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
    anchor?: {
        type?: import("lkt-vue-kernel").AnchorType | undefined;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class?: string | undefined;
        isActive?: boolean | undefined;
        downloadFileName?: string | undefined;
        disabled?: boolean | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: LktObject | undefined;
            confirmButton?: /*elided*/ any | undefined;
            cancelButton?: /*elided*/ any | undefined;
        } | undefined;
        imposter?: boolean | undefined;
        external?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        onClick?: Function | undefined;
    } | {
        type: import("lkt-vue-kernel").AnchorType;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class: string;
        isActive: boolean;
        downloadFileName: string;
        disabled: boolean;
        onClick: Function | undefined;
        confirmModal: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
        confirmData: LktObject;
        imposter: boolean;
        external: boolean;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        getHref: () => string;
        feed: (data?: LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
        assignProp: (key: string, value: any) => void;
    } | undefined;
    resource?: string | undefined;
    resourceData?: LktObject | undefined;
    modal?: import("lkt-vue-kernel").ValidModalName;
    modalKey?: import("lkt-vue-kernel").ValidModalKey;
    modalData?: Function | {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    confirmModal?: import("lkt-vue-kernel").ValidModalName;
    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
    confirmData?: {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    modalCallbacks?: {
        modalName: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        action: import("lkt-vue-kernel").ModalCallbackAction;
        method?: string | undefined;
        args?: LktObject | undefined;
    }[] | undefined;
    tooltip?: {
        modelValue?: boolean | undefined;
        alwaysOpen?: boolean | undefined;
        class?: string | undefined;
        text?: string | undefined;
        icon?: string | undefined;
        iconAtEnd?: boolean | undefined;
        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
        referrerMargin?: number | string | undefined;
        windowMargin?: number | string | undefined;
        referrerWidth?: boolean | undefined;
        referrer?: HTMLElement | undefined;
        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
        showOnReferrerHover?: boolean | undefined;
        showOnReferrerHoverDelay?: number | undefined;
        hideOnReferrerLeave?: boolean | undefined;
        hideOnReferrerLeaveDelay?: number | undefined;
    } | undefined;
    splitIcon?: string | undefined;
    showTooltipOnHover?: boolean | undefined;
    showTooltipOnHoverDelay?: number | undefined;
    hideTooltipOnLeave?: boolean | undefined;
    splitClass?: string | undefined;
    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
    prop?: LktObject | undefined;
    clickRef?: (Element | import("vue").VueElement) | undefined;
    events?: {
        click?: Function | undefined;
    } | undefined;
}, Partial<ButtonConfig> | {
    type?: import("lkt-vue-kernel").ButtonType | undefined;
    name?: string | undefined;
    value?: string | undefined;
    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
    openTooltip?: boolean | undefined;
    loading?: boolean | undefined;
    class?: string | undefined;
    containerClass?: string | undefined;
    wrapContent?: boolean | undefined;
    text?: import("lkt-vue-kernel").ValidTextValue;
    icon?: string | undefined;
    iconEnd?: string | undefined;
    img?: string | undefined;
    checked?: boolean | undefined;
    textOn?: import("lkt-vue-kernel").ValidTextValue;
    textOff?: import("lkt-vue-kernel").ValidTextValue;
    iconOn?: import("lkt-vue-kernel").ValidTextValue;
    iconOff?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
    anchor?: {
        type?: import("lkt-vue-kernel").AnchorType | undefined;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class?: string | undefined;
        isActive?: boolean | undefined;
        downloadFileName?: string | undefined;
        disabled?: boolean | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: LktObject | undefined;
            confirmButton?: /*elided*/ any | undefined;
            cancelButton?: /*elided*/ any | undefined;
        } | undefined;
        imposter?: boolean | undefined;
        external?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        onClick?: Function | undefined;
    } | {
        type: import("lkt-vue-kernel").AnchorType;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class: string;
        isActive: boolean;
        downloadFileName: string;
        disabled: boolean;
        onClick: Function | undefined;
        confirmModal: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
        confirmData: LktObject;
        imposter: boolean;
        external: boolean;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        getHref: () => string;
        feed: (data?: LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
        assignProp: (key: string, value: any) => void;
    } | undefined;
    resource?: string | undefined;
    resourceData?: LktObject | undefined;
    modal?: import("lkt-vue-kernel").ValidModalName;
    modalKey?: import("lkt-vue-kernel").ValidModalKey;
    modalData?: Function | {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    confirmModal?: import("lkt-vue-kernel").ValidModalName;
    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
    confirmData?: {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    modalCallbacks?: {
        modalName: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        action: import("lkt-vue-kernel").ModalCallbackAction;
        method?: string | undefined;
        args?: LktObject | undefined;
    }[] | undefined;
    tooltip?: {
        modelValue?: boolean | undefined;
        alwaysOpen?: boolean | undefined;
        class?: string | undefined;
        text?: string | undefined;
        icon?: string | undefined;
        iconAtEnd?: boolean | undefined;
        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
        referrerMargin?: number | string | undefined;
        windowMargin?: number | string | undefined;
        referrerWidth?: boolean | undefined;
        referrer?: HTMLElement | undefined;
        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
        showOnReferrerHover?: boolean | undefined;
        showOnReferrerHoverDelay?: number | undefined;
        hideOnReferrerLeave?: boolean | undefined;
        hideOnReferrerLeaveDelay?: number | undefined;
    } | undefined;
    splitIcon?: string | undefined;
    showTooltipOnHover?: boolean | undefined;
    showTooltipOnHoverDelay?: number | undefined;
    hideTooltipOnLeave?: boolean | undefined;
    splitClass?: string | undefined;
    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
    prop?: LktObject | undefined;
    clickRef?: (Element | import("vue").VueElement) | undefined;
    events?: {
        click?: Function | undefined;
    } | undefined;
}>, safeUpdateButton: import("vue").Ref<{
    type?: import("lkt-vue-kernel").ButtonType | undefined;
    name?: string | undefined;
    value?: string | undefined;
    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
    openTooltip?: boolean | undefined;
    loading?: boolean | undefined;
    class?: string | undefined;
    containerClass?: string | undefined;
    wrapContent?: boolean | undefined;
    text?: import("lkt-vue-kernel").ValidTextValue;
    icon?: string | undefined;
    iconEnd?: string | undefined;
    img?: string | undefined;
    checked?: boolean | undefined;
    textOn?: import("lkt-vue-kernel").ValidTextValue;
    textOff?: import("lkt-vue-kernel").ValidTextValue;
    iconOn?: import("lkt-vue-kernel").ValidTextValue;
    iconOff?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
    anchor?: {
        type?: import("lkt-vue-kernel").AnchorType | undefined;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class?: string | undefined;
        isActive?: boolean | undefined;
        downloadFileName?: string | undefined;
        disabled?: boolean | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: LktObject | undefined;
            confirmButton?: /*elided*/ any | undefined;
            cancelButton?: /*elided*/ any | undefined;
        } | undefined;
        imposter?: boolean | undefined;
        external?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        onClick?: Function | undefined;
    } | {
        type: import("lkt-vue-kernel").AnchorType;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class: string;
        isActive: boolean;
        downloadFileName: string;
        disabled: boolean;
        onClick: Function | undefined;
        confirmModal: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
        confirmData: LktObject;
        imposter: boolean;
        external: boolean;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        getHref: () => string;
        feed: (data?: LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
        assignProp: (key: string, value: any) => void;
    } | undefined;
    resource?: string | undefined;
    resourceData?: LktObject | undefined;
    modal?: import("lkt-vue-kernel").ValidModalName;
    modalKey?: import("lkt-vue-kernel").ValidModalKey;
    modalData?: Function | {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    confirmModal?: import("lkt-vue-kernel").ValidModalName;
    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
    confirmData?: {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    modalCallbacks?: {
        modalName: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        action: import("lkt-vue-kernel").ModalCallbackAction;
        method?: string | undefined;
        args?: LktObject | undefined;
    }[] | undefined;
    tooltip?: {
        modelValue?: boolean | undefined;
        alwaysOpen?: boolean | undefined;
        class?: string | undefined;
        text?: string | undefined;
        icon?: string | undefined;
        iconAtEnd?: boolean | undefined;
        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
        referrerMargin?: number | string | undefined;
        windowMargin?: number | string | undefined;
        referrerWidth?: boolean | undefined;
        referrer?: HTMLElement | undefined;
        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
        showOnReferrerHover?: boolean | undefined;
        showOnReferrerHoverDelay?: number | undefined;
        hideOnReferrerLeave?: boolean | undefined;
        hideOnReferrerLeaveDelay?: number | undefined;
    } | undefined;
    splitIcon?: string | undefined;
    showTooltipOnHover?: boolean | undefined;
    showTooltipOnHoverDelay?: number | undefined;
    hideTooltipOnLeave?: boolean | undefined;
    splitClass?: string | undefined;
    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
    prop?: LktObject | undefined;
    clickRef?: (Element | import("vue").VueElement) | undefined;
    events?: {
        click?: Function | undefined;
    } | undefined;
}, Partial<ButtonConfig> | {
    type?: import("lkt-vue-kernel").ButtonType | undefined;
    name?: string | undefined;
    value?: string | undefined;
    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
    openTooltip?: boolean | undefined;
    loading?: boolean | undefined;
    class?: string | undefined;
    containerClass?: string | undefined;
    wrapContent?: boolean | undefined;
    text?: import("lkt-vue-kernel").ValidTextValue;
    icon?: string | undefined;
    iconEnd?: string | undefined;
    img?: string | undefined;
    checked?: boolean | undefined;
    textOn?: import("lkt-vue-kernel").ValidTextValue;
    textOff?: import("lkt-vue-kernel").ValidTextValue;
    iconOn?: import("lkt-vue-kernel").ValidTextValue;
    iconOff?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
    anchor?: {
        type?: import("lkt-vue-kernel").AnchorType | undefined;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class?: string | undefined;
        isActive?: boolean | undefined;
        downloadFileName?: string | undefined;
        disabled?: boolean | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: LktObject | undefined;
            confirmButton?: /*elided*/ any | undefined;
            cancelButton?: /*elided*/ any | undefined;
        } | undefined;
        imposter?: boolean | undefined;
        external?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        onClick?: Function | undefined;
    } | {
        type: import("lkt-vue-kernel").AnchorType;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class: string;
        isActive: boolean;
        downloadFileName: string;
        disabled: boolean;
        onClick: Function | undefined;
        confirmModal: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
        confirmData: LktObject;
        imposter: boolean;
        external: boolean;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        getHref: () => string;
        feed: (data?: LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
        assignProp: (key: string, value: any) => void;
    } | undefined;
    resource?: string | undefined;
    resourceData?: LktObject | undefined;
    modal?: import("lkt-vue-kernel").ValidModalName;
    modalKey?: import("lkt-vue-kernel").ValidModalKey;
    modalData?: Function | {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    confirmModal?: import("lkt-vue-kernel").ValidModalName;
    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
    confirmData?: {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    modalCallbacks?: {
        modalName: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        action: import("lkt-vue-kernel").ModalCallbackAction;
        method?: string | undefined;
        args?: LktObject | undefined;
    }[] | undefined;
    tooltip?: {
        modelValue?: boolean | undefined;
        alwaysOpen?: boolean | undefined;
        class?: string | undefined;
        text?: string | undefined;
        icon?: string | undefined;
        iconAtEnd?: boolean | undefined;
        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
        referrerMargin?: number | string | undefined;
        windowMargin?: number | string | undefined;
        referrerWidth?: boolean | undefined;
        referrer?: HTMLElement | undefined;
        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
        showOnReferrerHover?: boolean | undefined;
        showOnReferrerHoverDelay?: number | undefined;
        hideOnReferrerLeave?: boolean | undefined;
        hideOnReferrerLeaveDelay?: number | undefined;
    } | undefined;
    splitIcon?: string | undefined;
    showTooltipOnHover?: boolean | undefined;
    showTooltipOnHoverDelay?: number | undefined;
    hideTooltipOnLeave?: boolean | undefined;
    splitClass?: string | undefined;
    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
    prop?: LktObject | undefined;
    clickRef?: (Element | import("vue").VueElement) | undefined;
    events?: {
        click?: Function | undefined;
    } | undefined;
}>, safeDropButton: import("vue").Ref<{
    type?: import("lkt-vue-kernel").ButtonType | undefined;
    name?: string | undefined;
    value?: string | undefined;
    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
    openTooltip?: boolean | undefined;
    loading?: boolean | undefined;
    class?: string | undefined;
    containerClass?: string | undefined;
    wrapContent?: boolean | undefined;
    text?: import("lkt-vue-kernel").ValidTextValue;
    icon?: string | undefined;
    iconEnd?: string | undefined;
    img?: string | undefined;
    checked?: boolean | undefined;
    textOn?: import("lkt-vue-kernel").ValidTextValue;
    textOff?: import("lkt-vue-kernel").ValidTextValue;
    iconOn?: import("lkt-vue-kernel").ValidTextValue;
    iconOff?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
    anchor?: {
        type?: import("lkt-vue-kernel").AnchorType | undefined;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class?: string | undefined;
        isActive?: boolean | undefined;
        downloadFileName?: string | undefined;
        disabled?: boolean | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: LktObject | undefined;
            confirmButton?: /*elided*/ any | undefined;
            cancelButton?: /*elided*/ any | undefined;
        } | undefined;
        imposter?: boolean | undefined;
        external?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        onClick?: Function | undefined;
    } | {
        type: import("lkt-vue-kernel").AnchorType;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class: string;
        isActive: boolean;
        downloadFileName: string;
        disabled: boolean;
        onClick: Function | undefined;
        confirmModal: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
        confirmData: LktObject;
        imposter: boolean;
        external: boolean;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        getHref: () => string;
        feed: (data?: LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
        assignProp: (key: string, value: any) => void;
    } | undefined;
    resource?: string | undefined;
    resourceData?: LktObject | undefined;
    modal?: import("lkt-vue-kernel").ValidModalName;
    modalKey?: import("lkt-vue-kernel").ValidModalKey;
    modalData?: Function | {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    confirmModal?: import("lkt-vue-kernel").ValidModalName;
    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
    confirmData?: {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    modalCallbacks?: {
        modalName: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        action: import("lkt-vue-kernel").ModalCallbackAction;
        method?: string | undefined;
        args?: LktObject | undefined;
    }[] | undefined;
    tooltip?: {
        modelValue?: boolean | undefined;
        alwaysOpen?: boolean | undefined;
        class?: string | undefined;
        text?: string | undefined;
        icon?: string | undefined;
        iconAtEnd?: boolean | undefined;
        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
        referrerMargin?: number | string | undefined;
        windowMargin?: number | string | undefined;
        referrerWidth?: boolean | undefined;
        referrer?: HTMLElement | undefined;
        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
        showOnReferrerHover?: boolean | undefined;
        showOnReferrerHoverDelay?: number | undefined;
        hideOnReferrerLeave?: boolean | undefined;
        hideOnReferrerLeaveDelay?: number | undefined;
    } | undefined;
    splitIcon?: string | undefined;
    showTooltipOnHover?: boolean | undefined;
    showTooltipOnHoverDelay?: number | undefined;
    hideTooltipOnLeave?: boolean | undefined;
    splitClass?: string | undefined;
    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
    prop?: LktObject | undefined;
    clickRef?: (Element | import("vue").VueElement) | undefined;
    events?: {
        click?: Function | undefined;
    } | undefined;
}, Partial<ButtonConfig> | {
    type?: import("lkt-vue-kernel").ButtonType | undefined;
    name?: string | undefined;
    value?: string | undefined;
    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
    openTooltip?: boolean | undefined;
    loading?: boolean | undefined;
    class?: string | undefined;
    containerClass?: string | undefined;
    wrapContent?: boolean | undefined;
    text?: import("lkt-vue-kernel").ValidTextValue;
    icon?: string | undefined;
    iconEnd?: string | undefined;
    img?: string | undefined;
    checked?: boolean | undefined;
    textOn?: import("lkt-vue-kernel").ValidTextValue;
    textOff?: import("lkt-vue-kernel").ValidTextValue;
    iconOn?: import("lkt-vue-kernel").ValidTextValue;
    iconOff?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
    anchor?: {
        type?: import("lkt-vue-kernel").AnchorType | undefined;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class?: string | undefined;
        isActive?: boolean | undefined;
        downloadFileName?: string | undefined;
        disabled?: boolean | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: LktObject | undefined;
            confirmButton?: /*elided*/ any | undefined;
            cancelButton?: /*elided*/ any | undefined;
        } | undefined;
        imposter?: boolean | undefined;
        external?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        onClick?: Function | undefined;
    } | {
        type: import("lkt-vue-kernel").AnchorType;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class: string;
        isActive: boolean;
        downloadFileName: string;
        disabled: boolean;
        onClick: Function | undefined;
        confirmModal: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
        confirmData: LktObject;
        imposter: boolean;
        external: boolean;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        getHref: () => string;
        feed: (data?: LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
        assignProp: (key: string, value: any) => void;
    } | undefined;
    resource?: string | undefined;
    resourceData?: LktObject | undefined;
    modal?: import("lkt-vue-kernel").ValidModalName;
    modalKey?: import("lkt-vue-kernel").ValidModalKey;
    modalData?: Function | {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    confirmModal?: import("lkt-vue-kernel").ValidModalName;
    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
    confirmData?: {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    modalCallbacks?: {
        modalName: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        action: import("lkt-vue-kernel").ModalCallbackAction;
        method?: string | undefined;
        args?: LktObject | undefined;
    }[] | undefined;
    tooltip?: {
        modelValue?: boolean | undefined;
        alwaysOpen?: boolean | undefined;
        class?: string | undefined;
        text?: string | undefined;
        icon?: string | undefined;
        iconAtEnd?: boolean | undefined;
        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
        referrerMargin?: number | string | undefined;
        windowMargin?: number | string | undefined;
        referrerWidth?: boolean | undefined;
        referrer?: HTMLElement | undefined;
        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
        showOnReferrerHover?: boolean | undefined;
        showOnReferrerHoverDelay?: number | undefined;
        hideOnReferrerLeave?: boolean | undefined;
        hideOnReferrerLeaveDelay?: number | undefined;
    } | undefined;
    splitIcon?: string | undefined;
    showTooltipOnHover?: boolean | undefined;
    showTooltipOnHoverDelay?: number | undefined;
    hideTooltipOnLeave?: boolean | undefined;
    splitClass?: string | undefined;
    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
    prop?: LktObject | undefined;
    clickRef?: (Element | import("vue").VueElement) | undefined;
    events?: {
        click?: Function | undefined;
    } | undefined;
}>, safeEditModeButton: import("vue").Ref<{
    type?: import("lkt-vue-kernel").ButtonType | undefined;
    name?: string | undefined;
    value?: string | undefined;
    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
    openTooltip?: boolean | undefined;
    loading?: boolean | undefined;
    class?: string | undefined;
    containerClass?: string | undefined;
    wrapContent?: boolean | undefined;
    text?: import("lkt-vue-kernel").ValidTextValue;
    icon?: string | undefined;
    iconEnd?: string | undefined;
    img?: string | undefined;
    checked?: boolean | undefined;
    textOn?: import("lkt-vue-kernel").ValidTextValue;
    textOff?: import("lkt-vue-kernel").ValidTextValue;
    iconOn?: import("lkt-vue-kernel").ValidTextValue;
    iconOff?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
    anchor?: {
        type?: import("lkt-vue-kernel").AnchorType | undefined;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class?: string | undefined;
        isActive?: boolean | undefined;
        downloadFileName?: string | undefined;
        disabled?: boolean | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: LktObject | undefined;
            confirmButton?: /*elided*/ any | undefined;
            cancelButton?: /*elided*/ any | undefined;
        } | undefined;
        imposter?: boolean | undefined;
        external?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        onClick?: Function | undefined;
    } | {
        type: import("lkt-vue-kernel").AnchorType;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class: string;
        isActive: boolean;
        downloadFileName: string;
        disabled: boolean;
        onClick: Function | undefined;
        confirmModal: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
        confirmData: LktObject;
        imposter: boolean;
        external: boolean;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        getHref: () => string;
        feed: (data?: LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
        assignProp: (key: string, value: any) => void;
    } | undefined;
    resource?: string | undefined;
    resourceData?: LktObject | undefined;
    modal?: import("lkt-vue-kernel").ValidModalName;
    modalKey?: import("lkt-vue-kernel").ValidModalKey;
    modalData?: Function | {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    confirmModal?: import("lkt-vue-kernel").ValidModalName;
    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
    confirmData?: {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    modalCallbacks?: {
        modalName: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        action: import("lkt-vue-kernel").ModalCallbackAction;
        method?: string | undefined;
        args?: LktObject | undefined;
    }[] | undefined;
    tooltip?: {
        modelValue?: boolean | undefined;
        alwaysOpen?: boolean | undefined;
        class?: string | undefined;
        text?: string | undefined;
        icon?: string | undefined;
        iconAtEnd?: boolean | undefined;
        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
        referrerMargin?: number | string | undefined;
        windowMargin?: number | string | undefined;
        referrerWidth?: boolean | undefined;
        referrer?: HTMLElement | undefined;
        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
        showOnReferrerHover?: boolean | undefined;
        showOnReferrerHoverDelay?: number | undefined;
        hideOnReferrerLeave?: boolean | undefined;
        hideOnReferrerLeaveDelay?: number | undefined;
    } | undefined;
    splitIcon?: string | undefined;
    showTooltipOnHover?: boolean | undefined;
    showTooltipOnHoverDelay?: number | undefined;
    hideTooltipOnLeave?: boolean | undefined;
    splitClass?: string | undefined;
    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
    prop?: LktObject | undefined;
    clickRef?: (Element | import("vue").VueElement) | undefined;
    events?: {
        click?: Function | undefined;
    } | undefined;
}, Partial<ButtonConfig> | {
    type?: import("lkt-vue-kernel").ButtonType | undefined;
    name?: string | undefined;
    value?: string | undefined;
    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
    openTooltip?: boolean | undefined;
    loading?: boolean | undefined;
    class?: string | undefined;
    containerClass?: string | undefined;
    wrapContent?: boolean | undefined;
    text?: import("lkt-vue-kernel").ValidTextValue;
    icon?: string | undefined;
    iconEnd?: string | undefined;
    img?: string | undefined;
    checked?: boolean | undefined;
    textOn?: import("lkt-vue-kernel").ValidTextValue;
    textOff?: import("lkt-vue-kernel").ValidTextValue;
    iconOn?: import("lkt-vue-kernel").ValidTextValue;
    iconOff?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
    anchor?: {
        type?: import("lkt-vue-kernel").AnchorType | undefined;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class?: string | undefined;
        isActive?: boolean | undefined;
        downloadFileName?: string | undefined;
        disabled?: boolean | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: LktObject | undefined;
            confirmButton?: /*elided*/ any | undefined;
            cancelButton?: /*elided*/ any | undefined;
        } | undefined;
        imposter?: boolean | undefined;
        external?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        onClick?: Function | undefined;
    } | {
        type: import("lkt-vue-kernel").AnchorType;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class: string;
        isActive: boolean;
        downloadFileName: string;
        disabled: boolean;
        onClick: Function | undefined;
        confirmModal: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
        confirmData: LktObject;
        imposter: boolean;
        external: boolean;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        getHref: () => string;
        feed: (data?: LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
        assignProp: (key: string, value: any) => void;
    } | undefined;
    resource?: string | undefined;
    resourceData?: LktObject | undefined;
    modal?: import("lkt-vue-kernel").ValidModalName;
    modalKey?: import("lkt-vue-kernel").ValidModalKey;
    modalData?: Function | {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    confirmModal?: import("lkt-vue-kernel").ValidModalName;
    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
    confirmData?: {
        [x: string]: any;
        [x: number]: any;
        modalName?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        zIndex?: number | undefined;
        type?: import("lkt-vue-kernel").ModalType | undefined;
        size?: string | undefined;
        preTitle?: string | undefined;
        preTitleIcon?: string | undefined;
        title?: string | undefined;
        closeIcon?: string | undefined;
        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
        showClose?: boolean | undefined;
        disabledClose?: boolean | undefined;
        disabledVeilClick?: boolean | undefined;
        hiddenFooter?: boolean | undefined;
        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
        item?: LktObject | undefined;
        confirmButton?: /*elided*/ any | undefined;
        cancelButton?: /*elided*/ any | undefined;
    } | undefined;
    modalCallbacks?: {
        modalName: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        action: import("lkt-vue-kernel").ModalCallbackAction;
        method?: string | undefined;
        args?: LktObject | undefined;
    }[] | undefined;
    tooltip?: {
        modelValue?: boolean | undefined;
        alwaysOpen?: boolean | undefined;
        class?: string | undefined;
        text?: string | undefined;
        icon?: string | undefined;
        iconAtEnd?: boolean | undefined;
        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
        referrerMargin?: number | string | undefined;
        windowMargin?: number | string | undefined;
        referrerWidth?: boolean | undefined;
        referrer?: HTMLElement | undefined;
        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
        showOnReferrerHover?: boolean | undefined;
        showOnReferrerHoverDelay?: number | undefined;
        hideOnReferrerLeave?: boolean | undefined;
        hideOnReferrerLeaveDelay?: number | undefined;
    } | undefined;
    splitIcon?: string | undefined;
    showTooltipOnHover?: boolean | undefined;
    showTooltipOnHoverDelay?: number | undefined;
    hideTooltipOnLeave?: boolean | undefined;
    splitClass?: string | undefined;
    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
    prop?: LktObject | undefined;
    clickRef?: (Element | import("vue").VueElement) | undefined;
    events?: {
        click?: Function | undefined;
    } | undefined;
}>;
declare const slots: SetupContext['slots'];
declare const saveButtonRef: import("vue").Ref<HTMLButtonElement | null, HTMLButtonElement | null>;
declare const dropButtonRef: import("vue").Ref<HTMLButtonElement | null, HTMLButtonElement | null>;
declare const isLoading: import("vue").Ref<boolean, boolean>;
declare const isEditing: import("vue").Ref<boolean, boolean>;
declare const onButtonLoading: () => void, onButtonLoaded: () => void, onCreate: ($event: Event | undefined, r: HTTPResponse) => void, onSave: ($event: Event | undefined, r: HTTPResponse) => void, onDrop: ($event: Event | undefined, r: HTTPResponse) => void;
declare const ableToUpdate: import("vue").ComputedRef<boolean>, ableToCreate: import("vue").ComputedRef<boolean>, ableToDrop: import("vue").ComputedRef<boolean>, showDropButton: import("vue").ComputedRef<boolean>, showSaveButton: import("vue").ComputedRef<boolean>, showSwitchButton: import("vue").ComputedRef<boolean>, showButtons: import("vue").ComputedRef<boolean>;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_1: {
    canUpdate: boolean | undefined;
    canDrop: boolean | undefined;
    perms: string[] | undefined;
}, __VLS_3: {
    canUpdate: boolean | undefined;
    canDrop: boolean | undefined;
    perms: string[] | undefined;
}, __VLS_17: {
    item: LktObject;
    editMode: boolean;
    isCreate: boolean;
    canUpdate: boolean | undefined;
    canDrop: boolean | undefined;
}, __VLS_31: {
    item: LktObject;
    editMode: boolean;
    isCreate: boolean;
    canUpdate: boolean | undefined;
    canDrop: boolean | undefined;
}, __VLS_45: {
    item: LktObject;
    editMode: boolean;
    isCreate: boolean;
    canUpdate: boolean | undefined;
    canDrop: boolean | undefined;
}, __VLS_47: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    'prev-buttons-ever'?: (props: typeof __VLS_1) => any;
} & {
    'prev-buttons'?: (props: typeof __VLS_3) => any;
} & {
    'button-save'?: (props: typeof __VLS_17) => any;
} & {
    'button-save'?: (props: typeof __VLS_31) => any;
} & {
    'button-drop'?: (props: typeof __VLS_45) => any;
} & {
    buttons?: (props: typeof __VLS_47) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<__VLS_Props, {
    ItemCrudMode: typeof ItemCrudMode;
    safeCreateButton: typeof safeCreateButton;
    safeUpdateButton: typeof safeUpdateButton;
    safeDropButton: typeof safeDropButton;
    safeEditModeButton: typeof safeEditModeButton;
    slots: typeof slots;
    saveButtonRef: typeof saveButtonRef;
    dropButtonRef: typeof dropButtonRef;
    isLoading: typeof isLoading;
    isEditing: typeof isEditing;
    onButtonLoading: typeof onButtonLoading;
    onButtonLoaded: typeof onButtonLoaded;
    onCreate: typeof onCreate;
    onSave: typeof onSave;
    onDrop: typeof onDrop;
    ableToUpdate: typeof ableToUpdate;
    ableToCreate: typeof ableToCreate;
    ableToDrop: typeof ableToDrop;
    showDropButton: typeof showDropButton;
    showSaveButton: typeof showSaveButton;
    showSwitchButton: typeof showSwitchButton;
    showButtons: typeof showButtons;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    drop: (...args: any[]) => void;
    create: (...args: any[]) => void;
    "update:loading": (...args: any[]) => void;
    "update:editing": (...args: any[]) => void;
    save: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{
    onDrop?: ((...args: any[]) => any) | undefined;
    onCreate?: ((...args: any[]) => any) | undefined;
    "onUpdate:loading"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editing"?: ((...args: any[]) => any) | undefined;
    onSave?: ((...args: any[]) => any) | undefined;
}>, {
    item: LktObject;
    editing: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<__VLS_Props, {
    doSave: () => void;
    doDrop: () => void;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    drop: (...args: any[]) => void;
    create: (...args: any[]) => void;
    "update:loading": (...args: any[]) => void;
    "update:editing": (...args: any[]) => void;
    save: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{
    onDrop?: ((...args: any[]) => any) | undefined;
    onCreate?: ((...args: any[]) => any) | undefined;
    "onUpdate:loading"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editing"?: ((...args: any[]) => any) | undefined;
    onSave?: ((...args: any[]) => any) | undefined;
}>, {
    item: LktObject;
    editing: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
